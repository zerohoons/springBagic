AOP : 관점지향 프로그래밍.
	: 핵심 관심과 공통 관심을 분리해서 사용한다.
		> 핵심 관심 : 해당클래스가 실행해야 될 원래의 기능
		> 공통 관심 : 여러 클래스에 중복적으로 사용되는 기능

주요용어 (기능) : 명령어
	> Aspect(advice를 모듈화) : 중복적으로 사용되는 기능(공통관심)을 모듈화 한것.
		>advice : 실질적으로 어떤 일을 해야할 지에 대한 공통관심을 구현한 것.
			> Advice 결함적 결합타입
				- Before advice : JoinPoint 전에 수행된는 advice
				- After returning advice : JoinPoint가 성공적으로 리턴된 후에 동작하는 advice
				- After throwing advice : 예외가 발생하여 JoinPoint가 빠져나갈 때 수행되는 advice
				- After (finally) advice : JoinPoint를 빠져나가는 (정상적이거나 예외적 반환) 방법에 수행되는 advice
				- Around advice : JoinPoint 전, 후에 수행되는 advice
	
	> JoinPoint : Advice가 적용될 위치, 끼어들 수 있는 지점을 말한다.
				: 일반적으로 method가 진입지점, 생성자 호출지점 등.
	
	> PointCut	: JoinPoint의 상세한 조건을 정의한 것.
				: ex)'A란 method의 진입 시점에 호출 할 것.'
	
		> 상세한 조건들의 例
			- execution(*메소드이름()) : 해당 메소드 실행되면,
			- execution(* set*())	   : 이름이 set으로 시작하는 모든 메소드가 실행되면,
			- execution(* com.xyz.service.* set*() : 해당 패키지의 모든 클래스에 set으로 시작하는 메소드가 실행되면, 
			- execution(* com.xyz.service.class명 set*() : 해당 패키지의 지정 클래스에 set으로 시작하는 메소드가 실행되면,
	 

				 